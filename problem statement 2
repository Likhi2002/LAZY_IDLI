#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "stdint.h"
#include "stdio.h"

typedef struct {
    uint8_t dataID;
    int32_t DataValue;
} Data_t;

extern uint8_t G_DataID;
extern int32_t G_DataValue;

QueueHandle_t Queue1;
TaskHandle_t TaskHandle_1;
TaskHandle_t TaskHandle_2;

void ExampleTask1(void *pV) {
    Data_t data;
    const TickType_t xDelay = pdMS_TO_TICKS(500);

    while (1) {
        data.dataID = G_DataID;
        data.DataValue = G_DataValue;
        if (xQueueSend(Queue1, &data, portMAX_DELAY) != pdPASS) {
            printf("Failed to send to queue\n");
        }
        vTaskDelay(xDelay);
    }
}

void ExampleTask2(void *pV) {
    Data_t data;

    while (1) {
        if (xQueueReceive(Queue1, &data, portMAX_DELAY) == pdPASS) {
            printf("Received: dataID = %d, DataValue = %d\n", data.dataID, data.DataValue);
            if (data.dataID == 0) {
                vTaskDelete(TaskHandle_2);
            } else if (data.dataID == 1) {
                if (data.DataValue == 0) {
                    vTaskPrioritySet(TaskHandle_2, uxTaskPriorityGet(TaskHandle_2) + 2);
                } else if (data.DataValue == 1) {
                    vTaskPrioritySet(TaskHandle_2, uxTaskPriorityGet(TaskHandle_2) - 2);
                } else if (data.DataValue == 2) {
                    vTaskDelete(TaskHandle_2);
                }
            }
        }
    }
}

int main(void) {
    Queue1 = xQueueCreate(5, sizeof(Data_t));
    if (Queue1 == NULL) {
        printf("Failed to create queue\n");
        return -1;
    }

    xTaskCreate(ExampleTask1, "Task1", 1000, NULL, 1, &TaskHandle_1);
    xTaskCreate(ExampleTask2, "Task2", 1000, NULL, 1, &TaskHandle_2);

    vTaskStartScheduler();

    return 0;
}
